/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.blz.cabinvoicegenerator.controler;

public class CabInvoiceGenerator {
	// CONSTANTS
	private static final double NORMAL_RIDE_COST_PER_KM = 10.0;
	private static final int NORMAL_RIDE_COST_PER_MIN = 1;
	private static final double NORMAL_RIDE_MIN_FARE = 5.0;
	private static final double PREMIUM_RIDE_COST_PER_KM = 15.0;
	private static final int PREMIUM_RIDE_COST_PER_MIN = 2;
	private static final double PREMIUM_RIDE_MIN_FARE = 20.0;

	// STORE THE RIDE DATA IN REPO-HASHMAP
	public RideRepository rideRepo;

	public CabInvoiceGenerator() {
		this.rideRepo = new RideRepository();
	}

	// FUNCTION TO ADD RIDES
	public void addRides(Integer userId, Ride[] rides) {
		rideRepo.addRides(userId, rides);
	}

	// FUNCTION TO CALCULATE TOTAL FARE FOR THE JOURNEY OF SINGLE RIDE
	public double calculateFare(double distance, int time) {
		double total;
		total = distance * NORMAL_RIDE_COST_PER_KM + time * NORMAL_RIDE_COST_PER_MIN;
		return Math.max(total, NORMAL_RIDE_MIN_FARE);
	}

	// FUNCTION TO CALCULATE TOTAL FARE FOR THE JOURNEY OF MULTIPLE RIDES
	public double getTotalFareMultipleRides(Ride[] rides) {
		double totalFare = 0;
		for (Ride ride : rides) {
			if (ride.rideType.equals(Ride.RideType.NORMAL_RIDE)) {
				totalFare += calculateFare(ride.getDistance(), ride.getTime());
				totalFare = Math.max(totalFare, NORMAL_RIDE_MIN_FARE);
			}
			else if (ride.rideType.equals(Ride.RideType.PREMIUM_RIDE)) {
				double rideFare = ride.getDistance() * PREMIUM_RIDE_COST_PER_KM + ride.getTime() * PREMIUM_RIDE_COST_PER_MIN;
				rideFare= Math.max(rideFare, PREMIUM_RIDE_MIN_FARE);
				totalFare+=rideFare;
			}
		}
		return totalFare;
	}

	// FUNCTION TO GET ENHANCED INVOICE SUMMARY FOR MULTIPLE RIDES
	public InvoiceSummary calculateFare(Ride[] rides) {
		double totalFare = 0;
		totalFare = getTotalFareMultipleRides(rides);
		return new InvoiceSummary(rides.length, totalFare);
	}

	// FUNCTION TO GET INVOICE SUMMARY FOR GIVEN USER ID
	public InvoiceSummary getInvoiceSummary(int userId) {
		Ride[] rideArray = rideRepo.getRides(userId);
		double totalFare = getTotalFareMultipleRides(rideArray);
		return new InvoiceSummary(rideArray.length, totalFare);
	}
}
