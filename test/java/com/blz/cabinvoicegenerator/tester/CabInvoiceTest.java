/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.blz.cabinvoicegenerator.tester;

import org.junit.Test;

import com.blz.cabinvoicegenerator.controler.CabInvoiceGenerator;
import com.blz.cabinvoicegenerator.controler.InvoiceSummary;
import com.blz.cabinvoicegenerator.controler.Ride;
import com.blz.cabinvoicegenerator.controler.RideRepository;

import org.junit.Assert;
import org.junit.Before;

public class CabInvoiceTest {
	CabInvoiceGenerator cabInvoiceObj = null;

	@Before
	public void setup() {
		cabInvoiceObj = new CabInvoiceGenerator();
	}

	@Test
	public void givenDistanceAndTime_ShouldReturnTotalFare() {
		double distance = 2.0;
		int time = 5;
		double actualfare = cabInvoiceObj.calculateFare(distance, time);
		Assert.assertEquals(25.0, actualfare, 0.0);
	}

	@Test
	public void givenLessDistanceOrTime_ShouldReturnTotalMinFare() {
		double distance = 0.1;
		int time = 1;
		double actualfare = cabInvoiceObj.calculateFare(distance, time);
		Assert.assertEquals(5.0, actualfare, 0.0);
	}

	@Test
	public void givenMultipleRides_ShouldReturnAggregateFare() {
		CabInvoiceGenerator cabInvoiceObj = new CabInvoiceGenerator();
		Ride[] rides = { new Ride(2.0, 5), new Ride(4.0, 3), new Ride(5.0, 2), new Ride(6.0, 5), new Ride(0.1, 1) };
		double totalFare = cabInvoiceObj.getTotalFareMultipleRides(rides);
		Assert.assertEquals(190.0, totalFare, 0);
	}
	
	@Test
	public void givenMultipleRides_ShouldReturnInvoiceSummary() {
		Ride[] rides = { new Ride(2.0, 5), new Ride(4.0, 3), new Ride(5.0, 2), new Ride(6.0, 5), new Ride(0.1, 1) };
		InvoiceSummary invoiceSummaryActual = cabInvoiceObj.calculateFare(rides);
		InvoiceSummary invoiceSummaryExpected = new InvoiceSummary(5, 190.0);
		Assert.assertEquals(invoiceSummaryExpected, invoiceSummaryActual);
	}

	@Test
	public void givenUserIdAndRides_ShouldReturnUserInvoiceSummary() {
		Integer userId = 101;
		Ride[] rides = { new Ride(2.0, 5), new Ride(4.0, 3), new Ride(5.0, 2), new Ride(6.0, 5), new Ride(0.1, 1) };
		cabInvoiceObj.addRides(userId, rides);
		InvoiceSummary invoiceSummaryActual = cabInvoiceObj.getInvoiceSummary(userId);
		InvoiceSummary summaryExpected = new InvoiceSummary(5, 190);
		Assert.assertEquals(invoiceSummaryActual, summaryExpected);
	}
}
